# <!-- Powered by BMAD™ Core -->
template:
  id: prd-template-v2
  name: 제품 요구사항 문서
  version: 2.0
  output:
    format: markdown
    filename: docs/prd.md
    title: "{{project_name}} 제품 요구사항 문서 (PRD)"

workflow:
  mode: interactive
  elicitation: advanced-elicitation

sections:
  - id: goals-context
    title: 목표 및 배경 맥락
    instruction: |
      프로젝트 브리프 문서가 있는지 문의하세요. 프로젝트 브리프가 없다면 먼저 project-brief-tmpl을 사용하여 생성할 것을 강력히 권장하세요 (필수 기초를 제공합니다: 문제 설명, 목표 사용자, 성공 지표, MVP 범위, 제약사항). 사용자가 브리프 없이 PRD를 고집한다면 목표 섹션 중에 이 정보를 수집하세요. 프로젝트 브리프가 존재한다면 검토하고 이를 사용하여 목표 (성공 시 PRD가 전달할 원하는 결과의 글머리 기호 목록)와 배경 맥락 (이것이 해결하는 것과 이유에 대한 1-2단락)을 채워 PRD MVP에 대한 범위 내외를 결정할 수 있도록 하세요. 어느 쪽이든 이것은 요구사항을 결정하는 데 중요합니다. 변경 로그 테이블을 포함하세요.
    sections:
      - id: goals
        title: 목표
        type: bullet-list
        instruction: PRD가 성공적으로 전달될 경우 달성될 원하는 결과의 한 줄 요약 글머리 기호 목록 - 사용자 및 프로젝트 욕구
      - id: background
        title: 배경 맥락
        type: paragraphs
        instruction: 목표와 중복되지 않고 브리프에서 학습한 것과 같은 배경 맥락, 현재 무엇을, 왜 문제를 해결하는지, 현재 환경이나 필요가 무엇인지에 대한 1-2개의 짧은 단락 요약
      - id: changelog
        title: 변경 로그
        type: table
        columns: [날짜, 버전, 설명, 작성자]
        instruction: 문서 버전과 변경 사항 추적

  - id: requirements
    title: 요구사항
    instruction: 두 개의 하위 섹션 아래에 기능적 및 비기능적 요구사항 목록을 작성하세요
    elicit: true
    sections:
      - id: functional
        title: 기능적
        type: numbered-list
        prefix: FR
        instruction: 각 요구사항은 FR로 시작하는 식별자 시퀀스와 함께 마크다운 글머리 기호가 됩니다
        examples:
          - "FR6: 할 일 목록은 AI를 사용하여 다르게 표현된 잠재적으로 중복되는 할 일 항목을 감지하고 경고합니다."
      - id: non-functional
        title: 비기능적
        type: numbered-list
        prefix: NFR
        instruction: 각 요구사항은 NFR로 시작하는 식별자 시퀀스와 함께 마크다운 글머리 기호가 됩니다
        examples:
          - "NFR1: AWS 서비스 사용은 가능한 곳에서 무료 계층 한도 내에 머무르는 것을 목표로 해야 합니다."

  - id: ui-goals
    title: 사용자 인터페이스 디자인 목표
    condition: PRD에 UX/UI 요구사항이 있는 경우
    instruction: |
      디자인 아키텍트를 안내하고 스토리 생성에 정보를 제공하기 위해 높은 수준의 UI/UX 비전을 포착하세요. 단계:

      1. 프로젝트 맥락을 기반으로 교육적 추측으로 모든 하위 섹션을 미리 채우세요
      2. 완전히 렌더링된 섹션을 사용자에게 제시하세요
      3. 가정이 어디서 이루어졌는지 사용자에게 명확히 알려주세요
      4. 불명확하거나 누락된 요소 또는 더 많은 사양이 필요한 영역에 대해 타겟 질문을 하세요
      5. 이것은 상세한 UI 사양이 아닙니다 - 제품 비전과 사용자 목표에 집중하세요
    elicit: true
    choices:
      accessibility: [없음, WCAG AA, WCAG AAA]
      platforms: [웹 반응형, 모바일 전용, 데스크톱 전용, 크로스 플랫폼]
    sections:
      - id: ux-vision
        title: 전체 UX 비전
      - id: interaction-paradigms
        title: 주요 상호작용 패러다임
      - id: core-screens
        title: 핵심 화면 및 뷰
        instruction: 제품 관점에서 PRD 가치와 목표를 전달하는 데 필요한 가장 중요한 화면이나 뷰는 무엇입니까? 이는 대략적인 에픽이나 사용자 스토리를 주도하는 개념적 높은 수준을 의미합니다
        examples:
          - "로그인 화면"
          - "메인 대시보드"
          - "항목 상세 페이지"
          - "설정 페이지"
      - id: accessibility
        title: "접근성: {없음|WCAG AA|WCAG AAA|사용자 정의 요구사항}"
      - id: branding
        title: 브랜딩
        instruction: 통합되어야 하는 알려진 브랜딩 요소나 스타일 가이드가 있습니까?
        examples:
          - "페이지나 상태 전환 중 필름 손상이나 프로젝터 결함을 복제하는 애니메이션 효과를 포함하여 1900년대 초 흑백 영화의 모양과 느낌을 복제합니다."
          - "우리 기업 브랜딩을 위한 전체 색상 팔레트와 토큰이 첨부되어 있습니다."
      - id: target-platforms
        title: "목표 디바이스 및 플랫폼: {웹 반응형|모바일 전용|데스크톱 전용|크로스 플랫폼}"
        examples:
          - "웹 반응형, 그리고 모든 모바일 플랫폼"
          - "iPhone 전용"
          - "ASCII 윈도우 데스크톱"

  - id: technical-assumptions
    title: 기술적 가정
    instruction: |
      아키텍트를 안내할 기술적 결정사항을 수집하세요. 단계:

      1. {root}/data/technical-preferences.yaml 또는 첨부된 technical-preferences 파일이 존재하는지 확인 - 이를 사용하여 선택사항을 미리 채우세요
      2. 사용자에게 언어, 프레임워크, 스타터 템플릿, 라이브러리, API, 배포 대상에 대해 질문하세요
      3. 알 수 없는 것들에 대해서는 프로젝트 목표와 MVP 범위를 기반으로 안내를 제공하세요
      4. 근거와 함께 모든 기술적 선택을 문서화하세요 (이 선택이 프로젝트에 적합한 이유)
      5. 이것들은 아키텍트의 제약조건이 됩니다 - 구체적이고 완전하게 작성하세요
    elicit: true
    choices:
      repository: [Monorepo, Polyrepo]
      architecture: [Monolith, Microservices, Serverless]
      testing: [Unit Only, Unit + Integration, Full Testing Pyramid]
    sections:
      - id: repository-structure
        title: "저장소 구조: {Monorepo|Polyrepo|Multi-repo}"
      - id: service-architecture
        title: 서비스 아키텍처
        instruction: "중요한 결정 - 고수준 서비스 아키텍처를 문서화하세요 (예: Monolith, Microservices, Monorepo 내의 Serverless functions)."
      - id: testing-requirements
        title: 테스팅 요구사항
        instruction: "중요한 결정 - 테스팅 요구사항을 문서화하세요, 단위 테스트만, 통합, e2e, 수동, 수동 테스팅 편의 방법의 필요성)."
      - id: additional-assumptions
        title: 추가 기술적 가정 및 요청
        instruction: 이 문서를 작성하는 전체 과정에서 아키텍트에게 적절한 다른 기술적 가정이 제기되거나 발견되면 여기에 추가 글머리 기호 항목으로 추가하세요

  - id: epic-list
    title: 에픽 목록
    instruction: |
      사용자 승인을 위한 모든 에픽의 고수준 목록을 제시하세요. 각 에픽은 제목과 짧은 (1문장) 목표 설명이 있어야 합니다. 이를 통해 사용자가 세부사항을 들어가기 전에 전체 구조를 검토할 수 있습니다.

      중요: 에픽은 애자일 모범 사례를 따라 논리적으로 순차적이어야 합니다:

      - 각 에픽은 중요하고, 종단간의, 완전히 배포 가능한 테스트 가능한 기능의 증분을 전달해야 합니다
      - 에픽 1은 기초적인 프로젝트 인프라를 구축해야 합니다 (앱 설정, Git, CI/CD, 핵심 서비스) 기존 앱에 새로운 기능을 추가하는 경우가 아니라면, 동시에 단순한 상태 확인 라우트나 간단한 카나리 페이지 표시와 같은 초기 기능도 전달해야 합니다 - 첫 번째 에픽의 스토리를 작성할 때 이를 기억하세요!
      - 이후의 각 에픽은 이전 에픽의 기능을 기반으로 구축되어 배포될 때 사용자나 비즈니스에 구체적인 가치를 제공하는 주요 기능 블록을 전달합니다
      - 모든 프로젝트가 여러 에픽을 필요로 하는 것은 아닙니다. 에픽은 가치를 전달해야 합니다. 예를 들어, 완성된 API는 UI가 완성되지 않고 별도의 에픽으로 계획되어 있어도 가치를 전달할 수 있습니다.
      - 더 적은 에픽을 선호하되, 사용자에게 근거를 알려주고 일부가 너무 크거나 서로 다른 것들에 집중하는 것 같으면 분할 옵션을 제공하세요.
      - 교차 관심사는 에픽과 스토리를 통해 흘러야 하며 최종 스토리가 되어서는 안 됩니다. 예를 들어, 로깅 프레임워크를 에픽의 마지막 스토리로 추가하거나 프로젝트 끝에 최종 에픽이나 스토리로 추가하는 것은 처음부터 로깅이 없기 때문에 끔찍할 것입니다.
    elicit: true
    examples:
      - "에픽 1: 기초 및 핵심 인프라: 프로젝트 설정, 인증, 기본 사용자 관리 구축"
      - "에픽 2: 핵심 비즈니스 엔티티: CRUD 작업으로 주요 도메인 객체 생성 및 관리"
      - "에픽 3: 사용자 워크플로우 및 상호작용: 핵심 사용자 여정 및 비즈니스 프로세스 활성화"
      - "에픽 4: 보고 및 분석: 사용자를 위한 통찰력 및 데이터 시각화 제공"

  - id: epic-details
    title: 에픽 {{epic_number}} {{epic_title}}
    repeatable: true
    instruction: |
      에픽 목록이 승인된 후, 모든 스토리와 승인 기준을 포함한 각 에픽을 완전한 검토 단위로 제시하세요.

      각 에픽에 대해 확장된 목표를 제공하세요 (모든 스토리가 달성할 목적과 가치를 설명하는 2-3문장).

      중요한 스토리 순서 요구사항:

      - 각 에픽 내의 스토리는 논리적으로 순차적이어야 합니다
      - 각 스토리는 프로젝트 기초를 위한 초기 활성화 스토리를 제외하고 완전한 기능을 전달하는 "수직적 슬라이스"여야 합니다
      - 어떤 스토리도 이후 스토리나 에픽의 작업에 의존해서는 안 됩니다
      - 직접적인 전제 조건 스토리를 식별하고 주목하세요
      - "어떻게"가 아닌 "무엇"과 "왜"에 집중하세요 (기술적 구현은 아키텍트에게 맡기세요) 하지만 스토리에서 스토리로의 논리적 순차적 작업 순서를 지원할 만큼 정확해야 합니다.
      - 각 스토리가 명확한 사용자나 비즈니스 가치를 전달하도록 하고, 활성화 요소를 피하고 가치를 전달하는 스토리에 구축하세요.
      - AI 에이전트 실행을 위한 스토리 크기 조정: 각 스토리는 컨텍스트 오버플로우 없이 한 번의 집중된 세션에서 단일 AI 에이전트가 완료할 수 있어야 합니다
      - "2-4시간 동안 일하는 주니어 개발자"를 생각하세요 - 스토리는 작고, 집중되고, 자체 완결적이어야 합니다
      - 스토리가 복잡해 보이면 수직적 슬라이스를 전달할 수 있는 한 더 세분화하세요
    elicit: true
    template: "{{epic_goal}}"
    sections:
      - id: story
        title: 스토리 {{epic_number}}.{{story_number}} {{story_title}}
        repeatable: true
        template: |
          {{user_type}}로서,
          나는 {{action}}을 원한다,
          {{benefit}}을 위해서.
        sections:
          - id: acceptance-criteria
            title: 승인 기준
            type: numbered-list
            item_template: "{{criterion_number}}: {{criteria}}"
            repeatable: true
            instruction: |
              다음과 같은 명확하고, 포괄적이며, 테스트 가능한 승인 기준을 정의하세요:

              - 기능적 관점에서 "완료"의 의미를 정확히 정의
              - 모호하지 않고 검증의 기초 역할을 함
              - PRD의 중요한 비기능적 요구사항을 포함
              - 백엔드/데이터 컴포넌트의 로컬 테스트 가능성 고려
              - 적용 가능한 경우 UI/UX 요구사항 및 프레임워크 준수 명시
              - 다른 스토리나 PRD 섹션에 있어야 할 교차 관심사 피하기

  - id: checklist-results
    title: 체크리스트 결과 보고서
    instruction: 체크리스트를 실행하고 프롬프트를 작성하기 전에 전체 업데이트된 PRD를 출력할 것인지 제안하세요. 출력한다면 체크리스트를 실행하고 보고서를 작성할 것임을 사용자에게 확인하세요. 사용자가 확인하면 pm-checklist를 실행하고 결과를 이 섹션에 입력하세요.

  - id: next-steps
    title: 다음 단계
    sections:
      - id: ux-expert-prompt
        title: UX 전문가 프롬프트
        instruction: 이 섹션에는 UX 전문가를 위한 프롬프트가 포함됩니다. 이 문서를 입력으로 사용하여 아키텍처 생성 모드를 시작하도록 짧고 요점을 담아 작성하세요.
      - id: architect-prompt
        title: 아키텍트 프롬프트
        instruction: 이 섹션에는 아키텍트를 위한 프롬프트가 포함됩니다. 이 문서를 입력으로 사용하여 아키텍처 생성 모드를 시작하도록 짧고 요점을 담아 작성하세요.
